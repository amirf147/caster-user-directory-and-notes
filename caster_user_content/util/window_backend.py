"""
Window Backend Interface

File Metadata:
- Generated by: Claude Opus 4 (Anthropic AI)
- Generation Date: 2025-07-18
- Generation Context: Sprint 1 - Window Switching Refactoring
- Original Prompt Context: TODO: Add prompt context location and content

Primary Contributors:
- AI Model: Claude Opus 4
- Human Developer: Amir Farhadi

Purpose: Abstract interface for window management operations
"""

from abc import ABC, abstractmethod
from typing import List, Tuple, Optional, Any
import time


class IWindowBackend(ABC):
    """
    Abstract interface for window management operations.
    
    This interface defines all window-related operations that backends must implement.
    Designed to abstract away the specific window manipulation library being used.
    """
    
    @abstractmethod
    def get_all_windows(self) -> List[Any]:
        """
        Get all currently open windows.
        
        Returns:
            List[Any]: List of window objects (implementation-specific type)
        """
        pass
    
    @abstractmethod
    def get_window_title(self, window: Any) -> str:
        """
        Get the title of a specific window.
        
        Args:
            window: Window object (implementation-specific type)
            
        Returns:
            str: Window title
        """
        pass
    
    @abstractmethod
    def focus_window(self, window: Any) -> None:
        """
        Bring a window to the foreground and give it focus.
        
        Args:
            window: Window object to focus (implementation-specific type)
        """
        pass
    
    @abstractmethod
    def get_window_position(self, window: Any) -> Tuple[int, int, int, int]:
        """
        Get the position and size of a window.
        
        Args:
            window: Window object (implementation-specific type)
            
        Returns:
            Tuple[int, int, int, int]: (left, top, width, height)
        """
        pass
    
    @abstractmethod
    def move_window(self, window: Any, x: int, y: int) -> None:
        """
        Move a window to a specific position.
        
        Args:
            window: Window object to move (implementation-specific type)
            x: X coordinate for window position
            y: Y coordinate for window position
        """
        pass
    
    @abstractmethod
    def resize_window(self, window: Any, width: int, height: int) -> None:
        """
        Resize a window to specific dimensions.
        
        Args:
            window: Window object to resize (implementation-specific type)
            width: New window width
            height: New window height
        """
        pass
    
    @abstractmethod
    def maximize_window(self, window: Any) -> None:
        """
        Maximize a window.
        
        Args:
            window: Window object to maximize (implementation-specific type)
        """
        pass
    
    @abstractmethod
    def minimize_window(self, window: Any) -> None:
        """
        Minimize a window.
        
        Args:
            window: Window object to minimize (implementation-specific type)
        """
        pass
    
    @abstractmethod
    def restore_window(self, window: Any) -> None:
        """
        Restore a window from minimized or maximized state.
        
        Args:
            window: Window object to restore (implementation-specific type)
        """
        pass
    
    @abstractmethod
    def is_window_minimized(self, window: Any) -> bool:
        """
        Check if a window is minimized.
        
        Args:
            window: Window object to check (implementation-specific type)
            
        Returns:
            bool: True if window is minimized
        """
        pass
    
    @abstractmethod
    def close_window(self, window: Any) -> None:
        """
        Close a window.
        
        Args:
            window: Window object to close (implementation-specific type)
        """
        pass
    
    @abstractmethod
    def find_window_by_title(self, title: str, exact_match: bool = False) -> Optional[Any]:
        """
        Find a window by its title.
        
        Args:
            title: Title to search for
            exact_match: If True, require exact title match. If False, use substring match.
            
        Returns:
            Optional[Any]: Window object if found, None otherwise
        """
        pass
    
    @abstractmethod
    def wait_for_window(self, title: str, timeout: float = 5.0) -> Optional[Any]:
        """
        Wait for a window with specific title to appear.
        
        Args:
            title: Window title to wait for
            timeout: Maximum time to wait in seconds
            
        Returns:
            Optional[Any]: Window object if found within timeout, None otherwise
        """
        pass
    
    @abstractmethod
    def get_active_window(self) -> Optional[Any]:
        """
        Get the currently active/focused window.
        
        Returns:
            Optional[Any]: Active window object, or None if no window is active
        """
        pass
    
    @abstractmethod
    def take_screenshot(self, window: Any = None) -> Any:
        """
        Take a screenshot of a window or the entire screen.
        
        Args:
            window: Specific window to screenshot. If None, screenshot entire screen.
            
        Returns:
            Any: Screenshot object (implementation-specific type)
        """
        pass
    
    def switch_to_window(self, window: Any) -> None:
        """
        High-level method to reliably switch to a window.
        
        This method combines multiple operations to ensure reliable window switching:
        1. Restore window if minimized
        2. Focus the window
        3. Wait briefly for the operation to complete
        
        Args:
            window: Window object to switch to
        """
        # Default implementation - backends can override if needed
        if self.is_window_minimized(window):
            self.restore_window(window)
            time.sleep(0.1)  # Brief pause for restore animation
        
        self.focus_window(window)
        time.sleep(0.05)  # Brief pause to ensure focus is set
    
    # TODO: Future methods to consider:
    # - get_window_process_name(window) -> str
    # - get_window_class_name(window) -> str  
    # - set_window_always_on_top(window, on_top: bool) -> None
    # - get_monitor_info() -> List[Monitor]
    # - move_window_to_monitor(window, monitor_index: int) -> None